/* msgpack::sbuffer is a simple buffer implementation. */
msgpack_sbuffer sbuf;
msgpack_sbuffer_init(&sbuf);

/* serialize values into the buffer using msgpack_sbuffer_write callback function. */
msgpack_packer pk;
msgpack_packer_init(&pk, &sbuf, msgpack_sbuffer_write);

msgpack_pack_array(&pk, 3);
msgpack_pack_int(&pk, 1);
msgpack_pack_true(&pk);
char *s = "{'a':'bh'}";
msgpack_pack_str(&pk, strlen(s));
msgpack_pack_str_body(&pk, s, strlen(s));

/* deserialize the buffer into msgpack_object instance. */
/* deserialized object is valid during the msgpack_zone instance alive. */
msgpack_zone mempool;
msgpack_zone_init(&mempool, 2048);

msgpack_object deserialized;
msgpack_unpack(sbuf.data, sbuf.size, NULL, &mempool, &deserialized);

/* print the deserialized object. */
msgpack_object_print(stdout, deserialized);
puts("");

msgpack_zone_destroy(&mempool);
msgpack_sbuffer_destroy(&sbuf);








    FILE *fp = fopen("./lvsi.table", "r"); // a+会append
    char json[999999];

    fgets(json, 999999, fp);

    printf("%s",json);

    return;

    msgpack_sbuffer sbuf;
    msgpack_sbuffer_init(&sbuf);

    /* serialize values into the buffer using msgpack_sbuffer_write callback function. */
    msgpack_packer pk;
    msgpack_packer_init(&pk, &sbuf, msgpack_sbuffer_write);

    msgpack_pack_array(&pk, 1);
    char *s = table_traverser_get_a_field_json(&field_temp);
    msgpack_pack_str(&pk, strlen(s));
    msgpack_pack_str_body(&pk, s, strlen(s));

    msgpack_zone mempool;
    msgpack_zone_init(&mempool, 2048);

    msgpack_object deserialized;
    msgpack_unpack(sbuf.data, sbuf.size, NULL, &mempool, &deserialized);

    /* print the deserialized object. */
    fp = fopen("./lvsi.table", "a+"); // a+会append
    msgpack_object_print(fp, deserialized);
